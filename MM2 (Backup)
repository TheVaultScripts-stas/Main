local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Murder Mystrery 2",
   Icon = 0,
   LoadingTitle = "The Vault Scripts",
   LoadingSubtitle = "by stas()",
   Theme = "Default",

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },

   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

local Tab = Window:CreateTab("ESP", 4483362458)
local mainTab = Window:CreateTab("Main", 4483362458)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

local espAndTracersEnabled = false
local boxEspEnabled = false

local connections = {}
local boxes = {}
local tracers = {}

-- Function to check if player has gun or knife
local function hasGunOrKnife(player)
    local hasGun, hasKnife = false, false

    local function checkTools(container)
        if not container then return end
        for _, item in pairs(container:GetChildren()) do
            if item:IsA("Tool") then
                local lowerName = item.Name:lower()
                if lowerName:find("gun") then
                    hasGun = true
                elseif lowerName:find("knife") then
                    hasKnife = true
                end
            end
        end
    end

    checkTools(player:FindFirstChild("Backpack"))
    checkTools(player.Character)

    return hasGun, hasKnife
end

-- Create Highlight ESP
local function createHighlight(player)
    local character = player.Character
    if not character then return end
    local highlight = character:FindFirstChild("ESP_Highlight")
    if not highlight then
        highlight = Instance.new("Highlight")
        highlight.Name = "ESP_Highlight"
        highlight.FillTransparency = 0.75
        highlight.OutlineTransparency = 0
        highlight.Adornee = character
        highlight.Parent = character
    end
end

-- Remove Highlight ESP
local function removeHighlight(player)
    local character = player.Character
    if character then
        local highlight = character:FindFirstChild("ESP_Highlight")
        if highlight then
            highlight:Destroy()
        end
    end
end

-- Create or get box for box ESP
local function getBoxForPlayer(player)
    if not boxes[player] then
        local box = Drawing.new("Square")
        box.Visible = false
        box.Thickness = 2
        box.Color = Color3.new(1,1,1)
        box.Filled = false
        box.ZIndex = 2
        boxes[player] = box
    end
    return boxes[player]
end

-- Create or get tracer line for tracers
local function getTracerForPlayer(player)
    if not tracers[player] then
        local line = Drawing.new("Line")
        line.Visible = false
        line.Color = Color3.new(1,1,1)
        line.Thickness = 1
        line.Transparency = 1
        tracers[player] = line
    end
    return tracers[player]
end

-- Update highlights colors based on weapon
local function updateHighlights()
    for _, player in pairs(Players:GetPlayers()) do
        local character = player.Character
        if character then
            local highlight = character:FindFirstChild("ESP_Highlight")
            if highlight then
                local hasGun, hasKnife = hasGunOrKnife(player)
                if hasGun then
                    highlight.FillColor = Color3.fromRGB(0, 0, 255)
                    highlight.OutlineColor = Color3.fromRGB(0, 0, 255)
                elseif hasKnife then
                    highlight.FillColor = Color3.fromRGB(255, 0, 0)
                    highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
                else
                    highlight.FillColor = Color3.fromRGB(255, 255, 255)
                    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                end
            end
        end
    end
end

-- Update box ESP (2D boxes)
local function updateBoxes()
    if not boxEspEnabled then
        for _, box in pairs(boxes) do
            box.Visible = false
        end
        return
    end

    for player, box in pairs(boxes) do
        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local cframe, size = character:GetBoundingBox()
            local corners = {
                cframe * Vector3.new( size.X/2,  size.Y/2,  size.Z/2),
                cframe * Vector3.new(-size.X/2,  size.Y/2,  size.Z/2),
                cframe * Vector3.new( size.X/2, -size.Y/2,  size.Z/2),
                cframe * Vector3.new(-size.X/2, -size.Y/2,  size.Z/2),
                cframe * Vector3.new( size.X/2,  size.Y/2, -size.Z/2),
                cframe * Vector3.new(-size.X/2,  size.Y/2, -size.Z/2),
                cframe * Vector3.new( size.X/2, -size.Y/2, -size.Z/2),
                cframe * Vector3.new(-size.X/2, -size.Y/2, -size.Z/2),
            }

            local screenCorners = {}
            local onScreen = false
            for i, corner in ipairs(corners) do
                local screenPos, visible = Camera:WorldToViewportPoint(corner)
                screenCorners[i] = Vector2.new(screenPos.X, screenPos.Y)
                if visible then
                    onScreen = true
                end
            end

            if onScreen then
                local minX = math.huge
                local maxX = -math.huge
                local minY = math.huge
                local maxY = -math.huge

                for _, v in pairs(screenCorners) do
                    if v.X < minX then minX = v.X end
                    if v.X > maxX then maxX = v.X end
                    if v.Y < minY then minY = v.Y end
                    if v.Y > maxY then maxY = v.Y end
                end

                local padding = 10
                minX = minX - padding
                maxX = maxX + padding
                minY = minY - padding
                maxY = maxY + padding

                box.Size = Vector2.new(maxX - minX, maxY - minY)
                box.Position = Vector2.new(minX, minY)

                local hasGun, hasKnife = hasGunOrKnife(player)
                if hasGun then
                    box.Color = Color3.fromRGB(0, 0, 255)
                elseif hasKnife then
                    box.Color = Color3.fromRGB(255, 0, 0)
                else
                    box.Color = Color3.fromRGB(255, 255, 255)
                end

                box.Visible = true
            else
                box.Visible = false
            end
        else
            box.Visible = false
        end
    end
end

-- Update tracers (lines from bottom center screen to player)
local function updateTracers()
    if not espAndTracersEnabled then
        for _, line in pairs(tracers) do
            line.Transparency = 0
            line.Visible = false
        end
        return
    end

    local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)

    for player, line in pairs(tracers) do
        local character = player.Character
        if character and character:FindFirstChild("HumanoidRootPart") then
            local root = character.HumanoidRootPart
            local screenPos, visible = Camera:WorldToViewportPoint(root.Position)
            if visible then
                local hasGun, hasKnife = hasGunOrKnife(player)
                if hasGun then
                    line.Color = Color3.fromRGB(0, 0, 255)
                elseif hasKnife then
                    line.Color = Color3.fromRGB(255, 0, 0)
                else
                    line.Color = Color3.fromRGB(255, 255, 255)
                end

                line.From = screenCenter
                line.To = Vector2.new(screenPos.X, screenPos.Y)
                line.Transparency = 1
                line.Visible = true
            else
                line.Transparency = 0
                line.Visible = false
            end
        else
            line.Transparency = 0
            line.Visible = false
        end
    end
end

-- Create ESP and setup listeners for player
local function setupPlayerESP(player)
    -- Remove highlight from old character if any
    removeHighlight(player)

    local function onCharacterAdded(character)
        if espAndTracersEnabled then
            createHighlight(player)
        end
    end

    if player.Character then
        onCharacterAdded(player.Character)
    end

    player.CharacterAdded:Connect(onCharacterAdded)
end

-- Remove all ESP/tracers/boxes on player leave
local function cleanupPlayer(player)
    removeHighlight(player)
    if boxes[player] then
        boxes[player]:Remove()
        boxes[player] = nil
    end
    if tracers[player] then
        tracers[player]:Remove()
        tracers[player] = nil
    end
end

-- Initialize existing players
for _, player in pairs(Players:GetPlayers()) do
    if player ~= LocalPlayer then
        setupPlayerESP(player)
        getBoxForPlayer(player)
        getTracerForPlayer(player)
    end
end

-- Setup for new players
Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        setupPlayerESP(player)
        getBoxForPlayer(player)
        getTracerForPlayer(player)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    cleanupPlayer(player)
end)

-- Main render loop
RunService.RenderStepped:Connect(function()
    if espAndTracersEnabled then
        updateHighlights()
        updateTracers()
    else
        for _, player in pairs(Players:GetPlayers()) do
            removeHighlight(player)
        end
    end

    if boxEspEnabled then
        updateBoxes()
    else
        for _, box in pairs(boxes) do
            box.Visible = false
        end
    end
end)

-- UI Toggles
local toggleESP = Tab:CreateToggle({
    Name = "Player ESP",
    CurrentValue = false,
    Flag = "esptracers",
    Callback = function(value)
        espAndTracersEnabled = value
        if not value then
            for _, player in pairs(Players:GetPlayers()) do
                removeHighlight(player)
            end
            for _, line in pairs(tracers) do
                line.Visible = false
            end
        else
            for _, player in pairs(Players:GetPlayers()) do
                setupPlayerESP(player)
            end
        end
    end
})

local toggleBoxESP = Tab:CreateToggle({
    Name = "Box Player ESP",
    CurrentValue = false,
    Flag = "boxesp",
    Callback = function(value)
        boxEspEnabled = value
        if not value then
            for _, box in pairs(boxes) do
                box.Visible = false
            end
        end
    end
})

local flyEnabled = false
local flySpeed = 50
local flyConnection = nil
local flyKey = Enum.KeyCode.E
local isFlying = false

local player = game:GetService("Players").LocalPlayer

local function ToggleFly()
    flyEnabled = not flyEnabled
    isFlying = flyEnabled -- Update isFlying state
    local character = player.Character
    if not character then return end
    
    if flyConnection then
        flyConnection:Disconnect()
        flyConnection = nil
    end
    
    local hum = character:FindFirstChildOfClass("Humanoid")
    if not hum then return end
    
    if flyEnabled then
        local gravityConnection = workspace:GetPropertyChangedSignal("Gravity"):Connect(function() end)
        local originalGravity = workspace.Gravity
        
        hum:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
        hum:ChangeState(Enum.HumanoidStateType.Swimming)
        
        flyConnection = game:GetService("RunService").RenderStepped:Connect(function()
            if not character or not character:FindFirstChild("HumanoidRootPart") then 
                if flyConnection then 
                    flyConnection:Disconnect()
                    flyConnection = nil
                end
                if gravityConnection then
                    gravityConnection:Disconnect()
                    workspace.Gravity = originalGravity
                end
                return 
            end
            
            local hrp = character.HumanoidRootPart
            local cam = workspace.CurrentCamera
            local UIS = game:GetService("UserInputService")
            
            local chatActive = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Chat") and 
                             game:GetService("Players").LocalPlayer.PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar:IsFocused()
            
            local textboxFocused = UIS:GetFocusedTextBox() ~= nil
            
            local moveDirection = Vector3.new()
            
            -- Only process movement if chat/textbox isn't active
            if not chatActive and not textboxFocused then
                if UIS:IsKeyDown(Enum.KeyCode.W) then
                    moveDirection = moveDirection + cam.CFrame.LookVector
                end
                if UIS:IsKeyDown(Enum.KeyCode.S) then
                    moveDirection = moveDirection - cam.CFrame.LookVector
                end
                
                if UIS:IsKeyDown(Enum.KeyCode.D) then
                    moveDirection = moveDirection + cam.CFrame.RightVector
                end
                if UIS:IsKeyDown(Enum.KeyCode.A) then
                    moveDirection = moveDirection - cam.CFrame.RightVector
                end
                
                if UIS:IsKeyDown(Enum.KeyCode.Space) then
                    moveDirection = moveDirection + Vector3.new(0, 1, 0)
                end
            end
            
            if moveDirection.Magnitude > 0 then
                moveDirection = moveDirection.Unit * flySpeed
                hrp.Velocity = moveDirection
            else
                hrp.Velocity = Vector3.new(0, 0, 0)
            end
            
            workspace.Gravity = 0
        end)
    else
        if hum then
            workspace.Gravity = 196.2
            hum:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
            hum:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
            hum:ChangeState(Enum.HumanoidStateType.Landed)
            isFlying = false -- Update isFlying state when disabled
        end
    end
end

local UIS = game:GetService("UserInputService")
UIS.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == flyKey then
        ToggleFly()
    end
end)

-- This would be part of your UI creation code (Rayfield in this case)
mainTab:CreateToggle({
    Name = "Flight (Press E)",
    CurrentValue = false,
    Callback = function(state)
        flyEnabled = state
        if state ~= isFlying then
            ToggleFly()
        end
    end
})
