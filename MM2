local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Murder Mystery 2",
   LoadingTitle = "The Vault Scripts",
   LoadingSubtitle = "by stas()",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "MM2Script",
      FileName = "Config"
   },
   KeySystem = false
})

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Tabs
local EspTab = Window:CreateTab("ESP", 4483362458)
local FlyTab = Window:CreateTab("Flight", 7733960981)

-- ESP Variables
local espAndTracersEnabled = false
local boxEspEnabled = false
local boxes, tracers = {}, {}

local function hasGunOrKnife(player)
    if not player.Character then return false, false end
    local hasGun, hasKnife = false, false
    local function checkItem(item)
        if item:IsA("Tool") then
            local name = item.Name:lower()
            if name:find("gun") then hasGun = true
            elseif name:find("knife") then hasKnife = true end
        end
    end
    local backpack = player:FindFirstChild("Backpack")
    if backpack then for _, item in ipairs(backpack:GetChildren()) do checkItem(item) end end
    for _, item in ipairs(player.Character:GetChildren()) do checkItem(item) end
    return hasGun, hasKnife
end

local function updateHighlight(player)
    if not player.Character then return end
    local highlight = player.Character:FindFirstChild("ESP_Highlight") or Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.Adornee = player.Character
    highlight.FillTransparency = 0.7
    highlight.OutlineTransparency = 0
    local hasGun, hasKnife = hasGunOrKnife(player)
    if hasGun then
        highlight.FillColor = Color3.fromRGB(0, 0, 255)
        highlight.OutlineColor = Color3.fromRGB(0, 0, 200)
    elseif hasKnife then
        highlight.FillColor = Color3.fromRGB(255, 0, 0)
        highlight.OutlineColor = Color3.fromRGB(200, 0, 0)
    else
        highlight.FillColor = Color3.fromRGB(255, 255, 255)
        highlight.OutlineColor = Color3.fromRGB(200, 200, 200)
    end
    highlight.Parent = player.Character
end

local function removeHighlight(player)
    if player.Character then
        local h = player.Character:FindFirstChild("ESP_Highlight")
        if h then h:Destroy() end
    end
end

local function createBox(player)
    if boxes[player] then return boxes[player] end
    local box = Drawing.new("Square")
    box.Visible = false
    box.Thickness = 2
    box.Filled = false
    box.ZIndex = 1
    boxes[player] = box
    return box
end

local function createTracer(player)
    if tracers[player] then return tracers[player] end
    local tracer = Drawing.new("Line")
    tracer.Visible = false
    tracer.Thickness = 1
    tracer.ZIndex = 1
    tracers[player] = tracer
    return tracer
end

local function updateESP()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            -- Highlights
            if espAndTracersEnabled then
                updateHighlight(player)
            else
                removeHighlight(player)
            end

            -- Box ESP
            local box = boxes[player] or createBox(player)
            if boxEspEnabled and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local pos, onScreen = Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
                if onScreen then
                    local hasGun, hasKnife = hasGunOrKnife(player)
                    box.Color = hasGun and Color3.fromRGB(0, 0, 255)
                        or hasKnife and Color3.fromRGB(255, 0, 0)
                        or Color3.fromRGB(255, 255, 255)
                    local size = player.Character:GetExtentsSize()
                    local scale = 1000 / (pos.Z * math.tan(math.rad(Camera.FieldOfView / 2)) * 2)
                    local width, height = size.X * scale, size.Y * scale
                    box.Size = Vector2.new(width, height)
                    box.Position = Vector2.new(pos.X - width/2, pos.Y - height/2)
                    box.Visible = true
                else
                    box.Visible = false
                end
            else
                box.Visible = false
            end

            -- Tracers
            local tracer = tracers[player] or createTracer(player)
            if espAndTracersEnabled and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local pos, onScreen = Camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
                if onScreen then
                    local hasGun, hasKnife = hasGunOrKnife(player)
                    tracer.Color = hasGun and Color3.fromRGB(0, 0, 255)
                        or hasKnife and Color3.fromRGB(255, 0, 0)
                        or Color3.fromRGB(255, 255, 255)
                    tracer.From = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y)
                    tracer.To = Vector2.new(pos.X, pos.Y)
                    tracer.Visible = true
                else
                    tracer.Visible = false
                end
            else
                tracer.Visible = false
            end
        end
    end
end

-- ESP Toggles
EspTab:CreateToggle({
    Name = "Player ESP",
    CurrentValue = false,
    Flag = "ESPEnabled",
    Callback = function(val)
        espAndTracersEnabled = val
        if not val then
            for _, p in ipairs(Players:GetPlayers()) do
                removeHighlight(p)
            end
        end
    end
})

EspTab:CreateToggle({
    Name = "Box ESP",
    CurrentValue = false,
    Flag = "BoxESPEnabled",
    Callback = function(val)
        boxEspEnabled = val
    end
})

RunService.RenderStepped:Connect(updateESP)

-- Cleanup on player leave
Players.PlayerRemoving:Connect(function(player)
    if boxes[player] then boxes[player]:Remove(); boxes[player] = nil end
    if tracers[player] then tracers[player]:Remove(); tracers[player] = nil end
    removeHighlight(player)
end)

-- Add ESP elements to new players
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if espAndTracersEnabled then updateHighlight(player) end
    end)
    createBox(player)
    createTracer(player)
end)

-- Add ESP to existing players
for _, p in ipairs(Players:GetPlayers()) do
    if p ~= LocalPlayer then
        createBox(p)
        createTracer(p)
    end
end

local flyEnabled = false
local flySpeed = 50
local flyConnection = nil
local flyKey = Enum.KeyCode.E
local isFlying = false

local player = game:GetService("Players").LocalPlayer

local function ToggleFly()
    flyEnabled = not flyEnabled
    isFlying = flyEnabled -- Update isFlying state
    local character = player.Character
    if not character then return end
    
    if flyConnection then
        flyConnection:Disconnect()
        flyConnection = nil
    end
    
    local hum = character:FindFirstChildOfClass("Humanoid")
    if not hum then return end
    
    if flyEnabled then
        local gravityConnection = workspace:GetPropertyChangedSignal("Gravity"):Connect(function() end)
        local originalGravity = workspace.Gravity
        
        hum:SetStateEnabled(Enum.HumanoidStateType.Climbing, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.GettingUp, false)
        hum:ChangeState(Enum.HumanoidStateType.Swimming)
        
        flyConnection = game:GetService("RunService").RenderStepped:Connect(function()
            if not character or not character:FindFirstChild("HumanoidRootPart") then 
                if flyConnection then 
                    flyConnection:Disconnect()
                    flyConnection = nil
                end
                if gravityConnection then
                    gravityConnection:Disconnect()
                    workspace.Gravity = originalGravity
                end
                return 
            end
            
            local hrp = character.HumanoidRootPart
            local cam = workspace.CurrentCamera
            local UIS = game:GetService("UserInputService")
            
            local chatActive = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Chat") and 
                             game:GetService("Players").LocalPlayer.PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar:IsFocused()
            
            local textboxFocused = UIS:GetFocusedTextBox() ~= nil
            
            local moveDirection = Vector3.new()
            
            -- Only process movement if chat/textbox isn't active
            if not chatActive and not textboxFocused then
                if UIS:IsKeyDown(Enum.KeyCode.W) then
                    moveDirection = moveDirection + cam.CFrame.LookVector
                end
                if UIS:IsKeyDown(Enum.KeyCode.S) then
                    moveDirection = moveDirection - cam.CFrame.LookVector
                end
                
                if UIS:IsKeyDown(Enum.KeyCode.D) then
                    moveDirection = moveDirection + cam.CFrame.RightVector
                end
                if UIS:IsKeyDown(Enum.KeyCode.A) then
                    moveDirection = moveDirection - cam.CFrame.RightVector
                end
                
                if UIS:IsKeyDown(Enum.KeyCode.Space) then
                    moveDirection = moveDirection + Vector3.new(0, 1, 0)
                end
            end
            
            if moveDirection.Magnitude > 0 then
                moveDirection = moveDirection.Unit * flySpeed
                hrp.Velocity = moveDirection
            else
                hrp.Velocity = Vector3.new(0, 0, 0)
            end
            
            workspace.Gravity = 0
        end)
    else
        if hum then
            workspace.Gravity = 196.2
            hum:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
            hum:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
            hum:ChangeState(Enum.HumanoidStateType.Landed)
            isFlying = false -- Update isFlying state when disabled
        end
    end
end

local UIS = game:GetService("UserInputService")
UIS.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == flyKey then
        ToggleFly()
    end
end)

-- This would be part of your UI creation code (Rayfield in this case)
FlyTab:CreateToggle({
    Name = "Enable Flight (Press E)",
    CurrentValue = false,
    Callback = function(state)
        flyEnabled = state
        if state ~= isFlying then
            ToggleFly()
        end
    end
})
