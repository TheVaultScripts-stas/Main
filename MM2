local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Murder Mystery 2",
   Icon = 0,
   LoadingTitle = "The Vault Scripts",
   LoadingSubtitle = "by Stas()",
   Theme = "Default",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },
   KeySystem = false
})

local Tab = Window:CreateTab("ESP", 4483362458)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

local tracerLines = {}
local espAndTracerEnabled = false

local function hasWeapon(player)
    local hasGun, hasKnife = false, false

    local function checkContainer(container)
        if not container then return end
        for _, item in pairs(container:GetChildren()) do
            if item:IsA("Tool") then
                local lowerName = item.Name:lower()
                if lowerName:find("gun") then
                    hasGun = true
                elseif lowerName:find("knife") then
                    hasKnife = true
                end
            end
        end
    end

    checkContainer(player:FindFirstChild("Backpack"))
    checkContainer(player.Character)
    return hasGun, hasKnife
end

local function createESP(player)
    local character = player.Character
    if not character then return end

    local highlight = character:FindFirstChild("ESP_Highlight")
    if not highlight then
        highlight = Instance.new("Highlight")
        highlight.Name = "ESP_Highlight"
        highlight.FillTransparency = 0.75
        highlight.OutlineTransparency = 0
        highlight.OutlineColor = Color3.new(1, 1, 1)
        highlight.Adornee = character
        highlight.Parent = character
    end
    return highlight
end

local function removeESP(player)
    if player.Character then
        local highlight = player.Character:FindFirstChild("ESP_Highlight")
        if highlight then
            highlight:Destroy()
        end
    end
end

local function createTracer(player)
    if tracerLines[player] then return tracerLines[player] end
    local line = Drawing.new("Line")
    line.Visible = true
    line.Thickness = 0
    line.Transparency = 1
    line.Color = Color3.new(1,1,1)
    tracerLines[player] = line
    return line
end

local function removeTracer(player)
    if tracerLines[player] then
        tracerLines[player]:Remove()
        tracerLines[player] = nil
    end
end

local function updateESPColors()
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            local highlight = player.Character:FindFirstChild("ESP_Highlight")
            if highlight then
                local hasGun, hasKnife = hasWeapon(player)
                if hasGun then
                    highlight.FillColor = Color3.fromRGB(0, 0, 255) -- Blue
                elseif hasKnife then
                    highlight.FillColor = Color3.fromRGB(255, 0, 0) -- Red
                else
                    highlight.FillColor = Color3.fromRGB(255, 255, 255) -- White
                end
            end
        end
    end
end

local function updateTracers()
    if not espAndTracerEnabled then
        for player, line in pairs(tracerLines) do
            line.Thickness = 0
            line.Transparency = 1
        end
        return
    end

    for player, line in pairs(tracerLines) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            local screenPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
            if onScreen then
                line.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                line.To = Vector2.new(screenPos.X, screenPos.Y)
                line.Thickness = 1.5
                line.Transparency = 1

                local hasGun, hasKnife = hasWeapon(player)
                if hasGun then
                    line.Color = Color3.fromRGB(0, 0, 255)
                elseif hasKnife then
                    line.Color = Color3.fromRGB(255, 0, 0)
                else
                    line.Color = Color3.fromRGB(255, 255, 255)
                end
            else
                line.Thickness = 0
                line.Transparency = 1
            end
        else
            line.Thickness = 0
            line.Transparency = 1
        end
    end
end

local function clearAll()
    for _, player in pairs(Players:GetPlayers()) do
        removeESP(player)
        removeTracer(player)
    end
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function(character)
        wait(1)
        if espAndTracerEnabled then
            createESP(player)
            createTracer(player)
        end
    end)

    player.CharacterRemoving:Connect(function()
        removeESP(player)
        removeTracer(player)
    end)
end

for _, player in pairs(Players:GetPlayers()) do
    onPlayerAdded(player)
    if player.Character and espAndTracerEnabled then
        createESP(player)
        createTracer(player)
    end
end

Players.PlayerAdded:Connect(onPlayerAdded)

Tab:CreateToggle({
    Name = "Player ESP",
    CurrentValue = false,
    Flag = "ESP_Tracer_Combo",
    Callback = function(value)
        espAndTracerEnabled = value
        if espAndTracerEnabled then
            for _, player in pairs(Players:GetPlayers()) do
                createESP(player)
                createTracer(player)
            end
        else
            for _, player in pairs(Players:GetPlayers()) do
                removeESP(player)
            end
            for _, line in pairs(tracerLines) do
                line.Thickness = 0
                line.Transparency = 1
            end
        end
    end
})

RunService.RenderStepped:Connect(function()
    if espAndTracerEnabled then
        updateESPColors()
    end
    updateTracers()
end)
